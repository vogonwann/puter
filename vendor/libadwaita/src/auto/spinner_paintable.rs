// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::ffi;
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "AdwSpinnerPaintable")]
    pub struct SpinnerPaintable(Object<ffi::AdwSpinnerPaintable, ffi::AdwSpinnerPaintableClass>) @implements gdk::Paintable;

    match fn {
        type_ => || ffi::adw_spinner_paintable_get_type(),
    }
}

impl SpinnerPaintable {
    #[doc(alias = "adw_spinner_paintable_new")]
    pub fn new(widget: Option<&impl IsA<gtk::Widget>>) -> SpinnerPaintable {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::adw_spinner_paintable_new(
                widget.map(|p| p.as_ref()).to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "adw_spinner_paintable_get_widget")]
    #[doc(alias = "get_widget")]
    pub fn widget(&self) -> Option<gtk::Widget> {
        unsafe { from_glib_none(ffi::adw_spinner_paintable_get_widget(self.to_glib_none().0)) }
    }

    #[doc(alias = "adw_spinner_paintable_set_widget")]
    #[doc(alias = "widget")]
    pub fn set_widget(&self, widget: Option<&impl IsA<gtk::Widget>>) {
        unsafe {
            ffi::adw_spinner_paintable_set_widget(
                self.to_glib_none().0,
                widget.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }

    #[cfg(feature = "v1_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_6")))]
    #[doc(alias = "widget")]
    pub fn connect_widget_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_widget_trampoline<F: Fn(&SpinnerPaintable) + 'static>(
            this: *mut ffi::AdwSpinnerPaintable,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::widget\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_widget_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

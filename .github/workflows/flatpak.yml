name: Build and Deliver Binaries

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, aarch64]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image for cross-compilation
      run: |
        docker buildx create --use
        docker buildx build --platform linux/amd64,linux/arm64 -t cross-compiler --load -f- . <<EOF
        FROM ubuntu:20.04
        RUN dpkg --add-architecture arm64 && \
            apt-get update && \
            apt-get install -y \
                pkg-config \
                libglib2.0-dev \
                libcairo2-dev \
                libgtk-4-dev \
                libadwaita-1-dev \
                gettext \
                gettext-base \
                gcc-aarch64-linux-gnu \
                g++-aarch64-linux-gnu \
                libglib2.0-dev:arm64 \
                libcairo2-dev:arm64 \
                libgtk-4-dev:arm64 \
                libadwaita-1-dev:arm64 \
                libpango1.0-dev:arm64 \
                libharfbuzz-dev:arm64 \
                libgdk-pixbuf2.0-dev:arm64 \
                libcairo-gobject2:arm64 \
                libvulkan-dev:arm64 \
                libgraphene-1.0-dev:arm64 \
                libgio2.0-dev:arm64 \
                libgobject-2.0-dev:arm64 \
                libglib2.0-dev:arm64 && \
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && \
            source $HOME/.cargo/env && \
            rustup default stable && \
            rustup target add aarch64-unknown-linux-gnu
        EOF

    - name: Build project
      run: |
        docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace cross-compiler \
          bash -c "source $HOME/.cargo/env && \
                   mkdir -p .cargo && \
                   echo '[target.aarch64-unknown-linux-gnu]' > .cargo/config.toml && \
                   echo 'linker = \"aarch64-linux-gnu-gcc\"' >> .cargo/config.toml && \
                   export CARGO_TARGET_DIR=/tmp/build/target && \
                   export PKG_CONFIG_ALLOW_CROSS=1 && \
                   export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig && \
                   export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc && \
                   export CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++ && \
                   cargo build --release --target aarch64-unknown-linux-gnu"

    - name: Upload Binary
      uses: actions/upload-artifact@v4
      with:
        name: puter-${{ matrix.arch }}
        path: /tmp/build/target/aarch64-unknown-linux-gnu/release/puter